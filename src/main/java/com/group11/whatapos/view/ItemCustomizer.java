/*
 * Copyright (C) 2021 skeet
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.group11.whatapos.view;

import com.group11.whatapos.controller.viewController;
import com.group11.whatapos.controller.currentOrderController;
import static com.group11.whatapos.controller.currentOrderController.currentOrder;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author skeet
 */
public class ItemCustomizer extends javax.swing.JFrame {

    public static JTable callingTable;  // This is the order table that the "customize" button click came from
    public static int callingTableRow;  // This is the row index of callingTable that the "customize" button click came from
    
    /**
     * Creates new form ItemCustomizer
     */
    public ItemCustomizer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        attributeTable = new javax.swing.JTable();
        doneButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        otherCommentsText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        attributeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Attribute Name", "Want it!?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(attributeTable);

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        nameLabel.setText("Customizing: ");

        otherCommentsText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otherCommentsTextActionPerformed(evt);
            }
        });

        jLabel1.setText("Other comments about this item:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(nameLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(doneButton)
                    .addComponent(otherCommentsText)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(doneButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(otherCommentsText, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        // Once "Done" is pressed, update the current item's attributes and switch back to the menu view
        
        // Define table model so we can read from the table
        DefaultTableModel table = ((DefaultTableModel)this.attributeTable.getModel());
        
        // Write the table values to currentOrder's corresponding element of itemAttributesList
        //System.out.println("Done button pressed! Here is what the user had down for the item: " + currentOrderController.currentOrder.items.get(this.callingTableRow).itemName);
        
        
        // This attribute string will be a comma-delimited list of all attributes marked as TRUE by the user.
        String attr_string = "";
        
        for (int i = 0; i < table.getRowCount(); i++) {
            // Printing the attribute and its value
            //System.out.println("[Row " + i + "] Attribute: " + table.getValueAt(i, 0) + "; Want it: " + table.getValueAt(i, 1));
            
            // Next, if current value is true (box ticked yes), then add it to the attr_string
            if ((boolean)table.getValueAt(i, 1)) {
                // If attr_string is empty, no preceding comma needed
                if (attr_string.equals("")) {
                    attr_string += (String)table.getValueAt(i, 0);
                    attr_string += ",";
                }
                
                // Otherwise, put a comma
                else {
                    attr_string += (String)table.getValueAt(i, 0);
                    attr_string += ",";
                }
            }
        }
        
        // Remove trailing comma
        attr_string = attr_string.replaceAll(",$", "");
        
        // Now that we are done looking for attributes, we have a complete attribute string that we should write to the corresponding element of currentOrder's itemAttributesList
        //System.out.println("Updating corresponding attribute string with: " + attr_string);
        
        currentOrderController.currentOrder.itemAttributesList.get(this.callingTableRow).itemAttributes = attr_string;
        
        System.out.println("Updated attribute string: " + currentOrderController.currentOrder.itemAttributesList.get(this.callingTableRow).itemAttributes);
        
        // Don't forget to note the special instructions!
        currentOrderController.currentOrder.itemAttributesList.get(this.callingTableRow).otherComments = this.otherCommentsText.getText();
        System.out.println("Updated other comments string: " + this.otherCommentsText.getText());
        
        viewController.changeToMenuView();
        
    }//GEN-LAST:event_doneButtonActionPerformed

    private void otherCommentsTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otherCommentsTextActionPerformed
        
    }//GEN-LAST:event_otherCommentsTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemCustomizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemCustomizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemCustomizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemCustomizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ItemCustomizer().setVisible(true);
            }
        });
    }
    
    public void closeFrame() {
        this.setVisible(false); //you can't see me!
        this.dispose(); //Destroy the JFrame object
    }
    public void runFrame(){
        // Make the window 720x480. It should do the trick
        this.setSize(720, 480);
        
        // Refresh table to reflect any changes to what we are currently customizing
        refreshTable();

    }
    
    public void refreshTable() {
        // Refresh the title label and table
        // Change the label to reflect the current item we are customizing
        this.nameLabel.setText("Customizing item: " + this.callingTable.getValueAt(this.callingTableRow, 0));
        this.setVisible(true);
        
        // Clear the text field as well
        this.otherCommentsText.setText("");
        
        clearTable();
        populateTable();
        
        

    }
    
    private void clearTable() {
        // Get the number of rows in the table currently, so we can clear them all
        int rowCount = this.attributeTable.getRowCount();
        
        // Define table model so we can modify the table
        DefaultTableModel table = ((DefaultTableModel)this.attributeTable.getModel());
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            table.removeRow(i);
        }
    }
    
    private void populateTable() {
        // Next, populate the table
        // For now, just print the corresponding item attributes
        
        // Define table model so we can modify the table
        DefaultTableModel table = ((DefaultTableModel)this.attributeTable.getModel());
        
        System.out.println("Populating itemCustomizer's attributesTable:");
        for (int i = 0; i < currentOrderController.currentOrder.items.get(this.callingTableRow).allowedItemAttributes.size(); i++) {
            System.out.println(currentOrderController.currentOrder.items.get(this.callingTableRow).allowedItemAttributes.get(i));
            table.addRow(new Object[]{currentOrderController.currentOrder.items.get(this.callingTableRow).allowedItemAttributes.get(i), false});
        }
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable attributeTable;
    private javax.swing.JButton doneButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField otherCommentsText;
    // End of variables declaration//GEN-END:variables
}
